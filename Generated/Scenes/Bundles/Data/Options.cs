// This file is automatically generated by Kumquat.
// Do not modify this file - YOUR CHANGES WILL BE ERASED!

using Lime;

namespace Game.Scenes.Data;
public class Options : Options<Lime.Frame>
{
	public const string AssetPath = "Shell/Options";

	public static readonly Lime.Frame FrameCache = (Lime.Frame)Node.Load(AssetPath);

	public Options() : base(FrameCache.Clone<Node>()) { }

	public Options(Node node) : base(node) { }

	public new Options Clone()
	{
		return new Options(It.Clone<Node>());
	}
}

public class Options<T> : ParsedNode where T : Node
{
	public T It => (T)Node;


	public class MusicGroup : ParsedNode
	{
		public Lime.Frame It => (Lime.Frame)Node;

		public Common.CheckGroup CheckGroup;

		public class Check : ParsedNode
		{
			public Lime.Frame It => (Lime.Frame)Node;

			public Check(Node node)
			{
				Node = node;
			}

			public Check Clone()
			{
				return new Check(It.Clone<Node>());
			}

			public Lime.Frame RunAnimationCheck()
			{
				Node.RunAnimation("Check");
				return (Lime.Frame)Node;
			}
			public Lime.Frame RunAnimationChecked()
			{
				Node.RunAnimation("Checked");
				return (Lime.Frame)Node;
			}
			public Lime.Frame RunAnimationUncheck()
			{
				Node.RunAnimation("Uncheck");
				return (Lime.Frame)Node;
			}
			public Lime.Frame RunAnimationUnchecked()
			{
				Node.RunAnimation("Unchecked");
				return (Lime.Frame)Node;
			}
		}

		public class BtnCheck : ParsedNode
		{
			public Lime.Button It => (Lime.Button)Node;

			public BtnCheck(Node node)
			{
				Node = node;
			}

			public BtnCheck Clone()
			{
				return new BtnCheck(It.Clone<Node>());
			}

			public Lime.Button RunAnimationInit()
			{
				Node.RunAnimation("Init");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationNormal()
			{
				Node.RunAnimation("Normal");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationFocus()
			{
				Node.RunAnimation("Focus");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationPress()
			{
				Node.RunAnimation("Press");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationRelease()
			{
				Node.RunAnimation("Release");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationDisable()
			{
				Node.RunAnimation("Disable");
				return (Lime.Button)Node;
			}
		}

		public readonly Check @_Check;
		public readonly BtnCheck @_BtnCheck;

		public MusicGroup(Node node)
		{
			Node = node;
			CheckGroup = new Common.CheckGroup(Node);
			@_Check = new Check(Node.Find<Node>("@Check"));
			@_BtnCheck = new BtnCheck(Node.Find<Node>("@BtnCheck"));
		}

		public MusicGroup Clone()
		{
			return new MusicGroup(It.Clone<Node>());
		}
	}

	public class SoundGroup : ParsedNode
	{
		public Lime.Frame It => (Lime.Frame)Node;

		public Common.CheckGroup CheckGroup;

		public class Check : ParsedNode
		{
			public Lime.Frame It => (Lime.Frame)Node;

			public Check(Node node)
			{
				Node = node;
			}

			public Check Clone()
			{
				return new Check(It.Clone<Node>());
			}

			public Lime.Frame RunAnimationCheck()
			{
				Node.RunAnimation("Check");
				return (Lime.Frame)Node;
			}
			public Lime.Frame RunAnimationChecked()
			{
				Node.RunAnimation("Checked");
				return (Lime.Frame)Node;
			}
			public Lime.Frame RunAnimationUncheck()
			{
				Node.RunAnimation("Uncheck");
				return (Lime.Frame)Node;
			}
			public Lime.Frame RunAnimationUnchecked()
			{
				Node.RunAnimation("Unchecked");
				return (Lime.Frame)Node;
			}
		}

		public class BtnCheck : ParsedNode
		{
			public Lime.Button It => (Lime.Button)Node;

			public BtnCheck(Node node)
			{
				Node = node;
			}

			public BtnCheck Clone()
			{
				return new BtnCheck(It.Clone<Node>());
			}

			public Lime.Button RunAnimationInit()
			{
				Node.RunAnimation("Init");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationNormal()
			{
				Node.RunAnimation("Normal");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationFocus()
			{
				Node.RunAnimation("Focus");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationPress()
			{
				Node.RunAnimation("Press");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationRelease()
			{
				Node.RunAnimation("Release");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationDisable()
			{
				Node.RunAnimation("Disable");
				return (Lime.Button)Node;
			}
		}

		public readonly Check @_Check;
		public readonly BtnCheck @_BtnCheck;

		public SoundGroup(Node node)
		{
			Node = node;
			CheckGroup = new Common.CheckGroup(Node);
			@_Check = new Check(Node.Find<Node>("@Check"));
			@_BtnCheck = new BtnCheck(Node.Find<Node>("@BtnCheck"));
		}

		public SoundGroup Clone()
		{
			return new SoundGroup(It.Clone<Node>());
		}
	}

	public class VoiceGroup : ParsedNode
	{
		public Lime.Frame It => (Lime.Frame)Node;

		public Common.CheckGroup CheckGroup;

		public class Check : ParsedNode
		{
			public Lime.Frame It => (Lime.Frame)Node;

			public Check(Node node)
			{
				Node = node;
			}

			public Check Clone()
			{
				return new Check(It.Clone<Node>());
			}

			public Lime.Frame RunAnimationCheck()
			{
				Node.RunAnimation("Check");
				return (Lime.Frame)Node;
			}
			public Lime.Frame RunAnimationChecked()
			{
				Node.RunAnimation("Checked");
				return (Lime.Frame)Node;
			}
			public Lime.Frame RunAnimationUncheck()
			{
				Node.RunAnimation("Uncheck");
				return (Lime.Frame)Node;
			}
			public Lime.Frame RunAnimationUnchecked()
			{
				Node.RunAnimation("Unchecked");
				return (Lime.Frame)Node;
			}
		}

		public class BtnCheck : ParsedNode
		{
			public Lime.Button It => (Lime.Button)Node;

			public BtnCheck(Node node)
			{
				Node = node;
			}

			public BtnCheck Clone()
			{
				return new BtnCheck(It.Clone<Node>());
			}

			public Lime.Button RunAnimationInit()
			{
				Node.RunAnimation("Init");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationNormal()
			{
				Node.RunAnimation("Normal");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationFocus()
			{
				Node.RunAnimation("Focus");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationPress()
			{
				Node.RunAnimation("Press");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationRelease()
			{
				Node.RunAnimation("Release");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationDisable()
			{
				Node.RunAnimation("Disable");
				return (Lime.Button)Node;
			}
		}

		public readonly Check @_Check;
		public readonly BtnCheck @_BtnCheck;

		public VoiceGroup(Node node)
		{
			Node = node;
			CheckGroup = new Common.CheckGroup(Node);
			@_Check = new Check(Node.Find<Node>("@Check"));
			@_BtnCheck = new BtnCheck(Node.Find<Node>("@BtnCheck"));
		}

		public VoiceGroup Clone()
		{
			return new VoiceGroup(It.Clone<Node>());
		}
	}

	public class FullScreenGroup : ParsedNode
	{
		public Lime.Frame It => (Lime.Frame)Node;

		public Common.CheckGroup CheckGroup;

		public class Check : ParsedNode
		{
			public Lime.Frame It => (Lime.Frame)Node;

			public Check(Node node)
			{
				Node = node;
			}

			public Check Clone()
			{
				return new Check(It.Clone<Node>());
			}

			public Lime.Frame RunAnimationCheck()
			{
				Node.RunAnimation("Check");
				return (Lime.Frame)Node;
			}
			public Lime.Frame RunAnimationChecked()
			{
				Node.RunAnimation("Checked");
				return (Lime.Frame)Node;
			}
			public Lime.Frame RunAnimationUncheck()
			{
				Node.RunAnimation("Uncheck");
				return (Lime.Frame)Node;
			}
			public Lime.Frame RunAnimationUnchecked()
			{
				Node.RunAnimation("Unchecked");
				return (Lime.Frame)Node;
			}
		}

		public class BtnCheck : ParsedNode
		{
			public Lime.Button It => (Lime.Button)Node;

			public BtnCheck(Node node)
			{
				Node = node;
			}

			public BtnCheck Clone()
			{
				return new BtnCheck(It.Clone<Node>());
			}

			public Lime.Button RunAnimationInit()
			{
				Node.RunAnimation("Init");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationNormal()
			{
				Node.RunAnimation("Normal");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationFocus()
			{
				Node.RunAnimation("Focus");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationPress()
			{
				Node.RunAnimation("Press");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationRelease()
			{
				Node.RunAnimation("Release");
				return (Lime.Button)Node;
			}
			public Lime.Button RunAnimationDisable()
			{
				Node.RunAnimation("Disable");
				return (Lime.Button)Node;
			}
		}

		public readonly Check @_Check;
		public readonly BtnCheck @_BtnCheck;

		public FullScreenGroup(Node node)
		{
			Node = node;
			CheckGroup = new Common.CheckGroup(Node);
			@_Check = new Check(Node.Find<Node>("@Check"));
			@_BtnCheck = new BtnCheck(Node.Find<Node>("@BtnCheck"));
		}

		public FullScreenGroup Clone()
		{
			return new FullScreenGroup(It.Clone<Node>());
		}
	}

	public readonly BtnOk<Lime.Button> @_BtnOk;
	public readonly MusicGroup @_MusicGroup;
	public readonly SoundGroup @_SoundGroup;
	public readonly VoiceGroup @_VoiceGroup;
	public readonly FullScreenGroup @_FullScreenGroup;

	public Options() : this(Options.FrameCache.Clone<Node>()) { }
	public Options(Node node)
	{
		Node = node;
		@_BtnOk = new BtnOk<Lime.Button>(Node.Find<Node>("@BtnOk"));
		@_MusicGroup = new MusicGroup(Node.Find<Node>(">[CheckGroup]MusicGroup"));
		@_SoundGroup = new SoundGroup(Node.Find<Node>(">[CheckGroup]SoundGroup"));
		@_VoiceGroup = new VoiceGroup(Node.Find<Node>(">[CheckGroup]VoiceGroup"));
		@_FullScreenGroup = new FullScreenGroup(Node.Find<Node>(">[CheckGroup]FullScreenGroup"));
	}

	public Options<T> Clone()
	{
		return new Options<T>(It.Clone<Node>());
	}

	public T RunAnimationHide()
	{
		Node.RunAnimation("Hide");
		return (T)Node;
	}
	public T RunAnimationShow()
	{
		Node.RunAnimation("Show");
		return (T)Node;
	}
}
