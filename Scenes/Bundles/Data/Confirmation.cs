// This file is automatically generated by Kumquat.
// Do not modify this file - YOUR CHANGES WILL BE ERASED!

using Lime;

namespace Game.Scenes.Data;
public class Confirmation : Confirmation<Lime.Frame>
{
	public const string AssetPath = "Shell/Confirmation";

	public static readonly Lime.Frame FrameCache = (Lime.Frame)Node.Load(AssetPath);

	public Confirmation() : base(FrameCache.Clone<Node>()) { }

	public Confirmation(Node node) : base(node) { }

	public new Confirmation Clone()
	{
		return new Confirmation(It.Clone<Node>());
	}
}

public class Confirmation<T> : ParsedNode where T : Node
{
	public T It => (T)Node;


	public class Title : ParsedNode
	{
		public Lime.RichText It => (Lime.RichText)Node;

		public Title(Node node)
		{
			Node = node;
		}

		public Title Clone()
		{
			return new Title(It.Clone<Node>());
		}
	}

	public readonly BtnX<Lime.Button> @_BtnCancel;
	public readonly Title @_Title;
	public readonly BtnOk<Lime.Button> @_BtnOk;

	public Confirmation() : this(Confirmation.FrameCache.Clone<Node>()) { }
	public Confirmation(Node node)
	{
		Node = node;
		@_BtnCancel = new BtnX<Lime.Button>(Node.Find<Node>("@BtnCancel"));
		@_Title = new Title(Node.Find<Node>("@Title"));
		@_BtnOk = new BtnOk<Lime.Button>(Node.Find<Node>("@BtnOk"));
	}

	public Confirmation<T> Clone()
	{
		return new Confirmation<T>(It.Clone<Node>());
	}

	public T RunAnimationHide()
	{
		Node.RunAnimation("Hide");
		return (T)Node;
	}
	public T RunAnimationShow()
	{
		Node.RunAnimation("Show");
		return (T)Node;
	}
}
