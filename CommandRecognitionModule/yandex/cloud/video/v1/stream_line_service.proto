syntax = "proto3";

package yandex.cloud.video.v1;

import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/video/v1/stream_line.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/video/v1;video";
option java_package = "yandex.cloud.api.video.v1";

// Stream line management service.
service StreamLineService {
    // Returns the specific stream line.
    rpc Get(GetStreamLineRequest) returns (StreamLine) {}

    // List lines for channel.
    rpc List(ListStreamLinesRequest) returns (ListStreamLinesResponse) {}

    // Create stream line.
    rpc Create(CreateStreamLineRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "CreateStreamLineMetadata"
            response: "StreamLine"
        };
    }

    // Update stream line.
    rpc Update(UpdateStreamLineRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "UpdateStreamLineMetadata"
            response: "StreamLine"
        };
    }

    // Delete stream line.
    rpc Delete(DeleteStreamLineRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "DeleteStreamLineMetadata"
            response: "google.protobuf.Empty"
        };
    }

    // Perform an action on the line.
    rpc PerformAction(PerformLineActionRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "PerformLineActionMetadata"
            response: "StreamLine"
        };
    }

    // Returns unique stream key.
    rpc GetStreamKey(GetStreamKeyRequest) returns (PushStreamKey) {}

    // Change stream key.
    rpc UpdateStreamKey(UpdateStreamKeyRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "UpdateStreamKeyMetadata"
            response: "PushStreamKey"
        };
    }
}

message GetStreamLineRequest {
    // ID of the line.
    string stream_line_id = 1;
}

message ListStreamLinesRequest {
    // ID of the channel.
    string channel_id = 1;

    // The maximum number of the results per page to return. Default value: 100.
    int64 page_size = 100;
    // Page token for getting the next page of the result.
    string page_token = 101;

    // By which column the listing should be ordered and in which direction,
    // format is "createdAt desc". "id asc" if omitted.
    // Possible fields: ["id", "title", "createdAt", "updatedAt"]
    // Both snake_case and camelCase are supported for fields.
    string order_by = 102;

    // Filter expression that filters resources listed in the response.
    // Expressions are composed of terms connected by logic operators.
    // Value in quotes: `'` or `"`
    // Example: "key1='value' AND key2='value'"
    // Supported operators: ["AND"].
    // Supported fields: ["title"]
    // Both snake_case and camelCase are supported for fields.
    string filter = 103;
}

message ListStreamLinesResponse {
    // List of lines for channel.
    repeated StreamLine stream_lines = 1;

    // Token for getting the next page.
    string next_page_token = 100;
}

message CreateStreamLineRequest {
    // ID of the channel.
    string channel_id = 1;
    // Line title.
    string title = 2;
    // ID of the thumbnail.
    string thumbnail_id = 3;

    // Custom labels as `` key:value `` pairs. Maximum 64 per resource.
    map<string, string> labels = 200;

    // Video signal settings.
    oneof input_params {
        // RTMP push input type.
        RTMPPushParams rtmp_push = 1000;
        // SRT push input type.
        SRTPushParams srt_push = 1001;
        // RTMP pull input type.
        RTMPPullParams rtmp_pull = 1002;
        // SRT pull input type.
        SRTPullParams srt_pull = 1003;
        // TCP pull input type.
        TCPPullParams tcp_pull = 1004;
        // RTSP pull input type.
        RTSPPullParams rtsp_pull = 1006;
    }

    // Line type.
    oneof line_type_params {
        // Manual control of stream.
        ManualLineParams manual_line = 2000;
        // Automatic control of stream.
        AutoLineParams auto_line = 2001;
    }
}

message CreateStreamLineMetadata {
    // ID of the line.
    string stream_line_id = 1;
}

message UpdateStreamLineRequest {
    // ID of the line.
    string stream_line_id = 1;
    // Field mask that specifies which fields of the line are going to be updated.
    google.protobuf.FieldMask field_mask = 2;

    // Line title.
    string title = 3;
    // ID of the thumbnail.
    string thumbnail_id = 4;

    // Custom labels as `` key:value `` pairs. Maximum 64 per resource.
    map<string, string> labels = 200;

    // Video signal settings.
    oneof input_params {
        // RTMP push input type.
        RTMPPushParams rtmp_push = 1000;
        // SRT push input type.
        SRTPushParams srt_push = 1001;
        // RTMP pull input type.
        RTMPPullParams rtmp_pull = 1002;
        // SRT pull input type.
        SRTPullParams srt_pull = 1003;
        // TCP pull input type.
        TCPPullParams tcp_pull = 1004;
        // RTSP pull input type.
        RTSPPullParams rtsp_pull = 1006;
    }
}

message UpdateStreamLineMetadata {
    // ID of the line.
    string stream_line_id = 1;
}

message DeleteStreamLineRequest {
    // ID of the line.
    string stream_line_id = 1;
}

message DeleteStreamLineMetadata {
    // ID of the line.
    string stream_line_id = 1;
}

message PerformLineActionRequest {
    // ID of the line.
    string stream_line_id = 1;
    oneof action {
        ActivateAction activate = 1000;
        DeactivateAction deactivate = 1001;
    }
}

message PerformLineActionMetadata {
    // ID of the line.
    string stream_line_id = 1;
}

message RTMPPushParams {}

message SRTPushParams {}

message RTMPPullParams {
    // URL of a RTMP streaming server.
    string url = 1;
}

message SRTPullParams {
    // URL of a SRT streaming server.
    string url = 1;
}

message TCPPullParams {
    // URL of a TCP streaming server.
    string url = 2;
}

message RTSPPullParams {
    // URL of a RTSP streaming server.
    string url = 1;
}

message ManualLineParams {}

message AutoLineParams {}

message ActivateAction {}

message DeactivateAction {}

message GetStreamKeyRequest {
    // ID of the line.
    string stream_line_id = 1;
}

message UpdateStreamKeyRequest {
    // ID of the line.
    string stream_line_id = 1;
}

message UpdateStreamKeyMetadata {
    // ID of the line.
    string stream_line_id = 1;
}
